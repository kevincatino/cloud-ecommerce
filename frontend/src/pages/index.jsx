import Head from 'next/head'
import ActionButton from '@components/ItemAction'
import { useState } from 'react';

import ApiClient from 'src/api';

export default function Home({isLogged}) {

  const [addItem, setAddItem] = useState({
    productName: "", 
    productPrice: "",
    productStockAmount: "",
    productDescription: "",
  })
  const [addBooking, setAddBooking] = useState({
    userId: "", 
    amount: "",
    productId: "",
  })
  const [addBookingResponse, setAddBookingResponse] = useState(null)
  const [addResponse, setAddResponse] = useState(null)
  const [getItems, setGetItems] = useState([]);
  const [getItemsBooked, setGetItemsBooked] = useState([]);
  const [deleteItemId, setDeleteItemId] = useState({
    id: ""
  });
  const [deleteResponse, setDeleteResponse] = useState(null);
  const [selectedImage, setSelectedImage] = useState(null);

  const handleAdd = async () => {
    try {
      const response = await ApiClient.addProduct(addItem)
      const data = response.data
      setAddResponse(data);
      await addImage(data.id)
      setAddItem({
        productName: "", 
        productPrice: "",
        productStockAmount: "",
        productDescription: "",
      })
    } catch (error) {
      console.error('Error adding item:', error)
    }
  }

  const handleAddBookings = async () => {
    try {
      const response = await ApiClient.bookProduct(addBooking.productId, addBooking);
      const data = response.data
      setAddBookingResponse(data);
      console.log('Added item:', data);
      setAddBooking({
        productId: "",
        amount: "",
      })
    } catch (error) {
      console.error('Error adding item:', error)
    }
  }

  const handleGet = async () => {
    try {
      const response = await ApiClient.getProducts();
      const data = response.data;
      setGetItems(data.products)
      console.log('Fetched items:', data);
    } catch (error) {
      console.error('Error fetching items:', error);
    }
  };

  const handleGetBookings = async () => {
    try {
      const response = await ApiClient.getBookings();
      const data = response.data;
      setGetItemsBooked(data.products)
      console.log('Fetched items:', data);
    } catch (error) {
      console.error('Error fetching items:', error);
    }
  };

  const handleDelete = async () => {
    try {
      const response = await ApiClient.deleteProduct(deleteItemId.id);
      if (!response.error) {
        setDeleteResponse({ success: true, id: deleteItemId.id });
        console.log('Deleted item with ID:', deleteItemId);
        setDeleteItemId({id: ""})
      } else {
        throw new Error('Failed to delete item');
      }
    } catch (error) {
      console.error('Error deleting item:', error);
    }
  };

  const addImage = async (id) => {
    try {
      const formData = new FormData();
      formData.append('image', selectedImage);
      await ApiClient.addImage(id,formData);
      setSelectedImage(null)
    } catch (error) {
      console.error('Error fetching items:', error);
    }
  };

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='flex flex-row w-screen'>
        <ActionButton 
          buttonText="Add product" 
          buttonColor="#85c1e9" 
          hasInput={true} 
          onButtonClick={handleAdd} 
          placeholder="Enter"
          inputValue={addItem}
          setInputValue={setAddItem}
          addResponse={addResponse}
          hasInputImage={true}
          setSelectedImage={setSelectedImage}
          isLogged={isLogged}
        />
        <ActionButton 
          buttonText="Get products" 
          buttonColor="#239b56" 
          hasInput={false} 
          onButtonClick={handleGet}
          hasBorderLeft={true}
          hasBorderRight={true}
          getResponse={getItems}
          isLogged={true}
        />
        <ActionButton 
          buttonText="Delete product" 
          buttonColor="#e74c3c" 
          hasInput={true} 
          onButtonClick={handleDelete}
          placeholder="Enter"
          inputValue={deleteItemId}
          setInputValue={setDeleteItemId}
          deleteResponse={deleteResponse}
          isLogged={isLogged}
        />

        <ActionButton 
          buttonText="Book product" 
          buttonColor="#f39c12"
          hasBorderLeft={true}
          hasBorderRight={true}
          hasInput={true} 
          onButtonClick={handleAddBookings} 
          placeholder="Enter"
          inputValue={addBooking}
          setInputValue={setAddBooking}
          addResponse={addBookingResponse}
          isLogged={isLogged}
        />

        <ActionButton 
          buttonText="Get bookings" 
          buttonColor="#a569bd" 
          hasInput={false} 
          onButtonClick={handleGetBookings}
          hasBorderRight={true}
          getResponse={getItemsBooked}
          isGetBooking={true}
          isLogged={isLogged}
        />
      </div>
    </>
  )
}
